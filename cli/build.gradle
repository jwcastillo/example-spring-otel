plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'conventions.java'
    id 'com.google.cloud.tools.jib'
}

configurations {
    agent
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    agent libs.opentelemetry.javaagent
    implementation libs.opentelemetry.api
    implementation libs.opentelemetry.annotations

    annotationProcessor libs.picocli.codegen
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    implementation project(':core')
    implementation project(':persistence')
    implementation libs.picocli.spring
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation "org.spockframework:spock-spring"
    testImplementation testLibs.spock.core
    testImplementation testLibs.spock.spring
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task downloadAgent(type: Copy) {
    from configurations.agent
    rename('(.*)-.*(.jar)', '$1$2')
    into 'agent/'
}

tasks.processResources.finalizedBy tasks.downloadAgent

jib {
    from {
        image = 'gcr.io/distroless/java17:nonroot@sha256:a32063ab4dbb0c3fdd89f4e9989ed6d268f3b399fd17ff64ff94fe54256027ca'
    }
    to {
        image = 'sbstnc/example-spring-otel-cli'
    }
    container {
        ports = ['8080']
        jvmFlags = [
            '-XX:InitialRAMPercentage=80.0',
            '-XX:MaxRAMPercentage=80.0',
            '-Dotel.metrics.exporter=none',
            "-Dotel.resource.attributes=rest.name=${rootProject.name}".toString(),
            '-Dotel.javaagent.debug=false',
            '-javaagent:/app/agent/opentelemetry-javaagent.jar',
        ]
    }
    extraDirectories {
        paths {
            path {
                from = 'agent'
                into = '/app/agent'
                permissions = ['*.jar': '644']
            }
        }
    }
}
